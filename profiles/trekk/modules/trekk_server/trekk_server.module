<?php

/**
 * Implements hook_menu
 *
 * Create a menu item for the server test
 */
function trekk_server_menu() {
  $items = array();

  $items['trekker-server-test'] = array(
    'title' => 'Trekker Server Test',
    'page callback' => 'trekker_server_test',
    'access arguments' => array('access content'), # restrict this
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Quick 'n Dirty way to test the Trekker Server
 */
function trekk_server_test() {
  #	make into config setting
  #	$url = 'http://example.com/rest/taxonomy_term/getChildren';
  $getargs = array();
  foreach ($_GET as $key=>$value) {
    $key = check_plain($key);
    $value = check_plain($value);
    $getargs[$key] = $value;
  }
  $options = array('method' => 'POST', 'data' => drupal_http_build_query($getargs));
  $response = drupal_http_request($url, $options);

  //dpm(drupal_json_decode($response->data));

  return array('#markup' => t('Trekker Server Test'));
}

/**
 * Implements hook_services_resources_alter
 * 
 * Handles nodes and taxo--this is how we hook into the resource to define the callbacks.
 */
function trekk_server_services_resources_alter(&$resources) {
  // handle nodes
  if (isset($resources['node'])) {
    $node_actions = array(
      'views' => array(
        'callback' => '_node_action_node_view',
        'help' => t('Renders a node'),
        'access arguments' => array('access content'),
        'args' => array(
          0 => array(
            'name' => 'nid',
            'type' => 'int',
            'description' => t('An node ID'),
            'source' => array('path' => 0),
            'optional' => FALSE,
          ),
          1 => array(
            'name' => 'view_mode',
            'type' => 'string',
            'source' => array('data' => 'view_mode'),
            'optional' => TRUE,
          ),
          2 => array(
            'name' => 'langcode',
            'type' => 'string',
            'source' => array('data' => 'langcode'),
            'optional' => TRUE,
          ),
        ),
      ),
      'render' => array(
        'callback' => '_node_action_node_render',
        'help' => t('Renders a node'),
        'access arguments' => array('access content'),
        'args' => array(
          0 => array(
            'name' => 'nid',
            'type' => 'int',
            'description' => t('An node ID'),
            'source' => array('path' => 0),
            'optional' => FALSE,
          ),
          1 => array(
            'name' => 'view_mode',
            'type' => 'string',
            'source' => array('data' => 'view_mode'),
            'optional' => TRUE,
          ),
          2 => array(
            'name' => 'langcode',
            'type' => 'string',
            'source' => array('data' => 'langcode'),
            'optional' => TRUE,
          ),
        ),
      ),
    );
    $resources['node'] += array('targeted_actions' => $node_actions);
  }
}

/**
 * Implementation of hook_services_resources
 *
 * Defines the endpoint resources to which we respond.
 */
function trekk_server_services_resources() {
	$resources['views']['index'] = array(
    'help' => 'Retrieves an index of available views.',
    'file' => array(
      'type' => 'inc',
      'module' => 'trekk_server',
      'name' => 'resources/views_resource',
    ),
    'callback' => 'views_resource_index',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'access arguments append' => FALSE,
  );
  
  $query = db_select('views_view', 'vv');
  $result = $query->fields('vv', array('name'))->execute();
  foreach ($result as $view) {

  $resources[$view->name]['retrieve'] = array(
    'help' => 'Retrieves a view.',
    'file' => array(
      'type' => 'inc',
      'module' => 'trekk_server',
      'name' => 'resources/views_resource',
    ),
    'callback' => 'views_resource_retrieve',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'access arguments append' => FALSE,
    'args' => array(
      'display' => array(
        'name' => 'return_type',
        'type' => 'string',
        'description' => 'The name of the view to get.',
        'source' => array('path' => '0'),
        'optional' => FALSE,
      ),
      'view_name' => array(
        'name' => 'view_name',
        'type' => 'string',
        'description' => t('The name of the view to get.'),
        'source' => array('param' => 'view_name'),
        'optional' => TRUE,
        'default value' => $view->name,
      ),
      'args' => array(
        'name' => 'args',
        'type' => 'array',
        'description' => 'A list of arguments to pass to the view.',
        'source' => array('param' => 'args'),
        'optional' => TRUE,
        'default value' => array(),
      ),
      'offset' => array(
        'name' => 'offset',
        'type' => 'int',
        'description' => 'The number of the entry for the page begin with.',
        'source' => array('param' => 'offset'),
        'optional' => TRUE,
        'default value' => 0,
      ),
      'limit' => array(
        'name' => 'limit',
        'type' => 'int',
        'description' => 'The total number of entries to list.',
        'source' => array('param' => 'limit'),
        'optional' => TRUE,
        'default value' => 10,
      ),
      'filters' => array(
        'name' => 'filters',
        'type' => 'array',
        'description' => 'A list of filters to pass to the view.  These are defined by the exposed filters on your view.  Example call: <code>/views/your_view?filters[nid]=12345</code>',
        'source' => array('param' => 'filters'),
        'optional' => TRUE,
        'default value' => array(),
      ),
      'output' => array(
        'name' => 'output',
        'type' => 'string',
        'desctiption' => t('Output type. Defaults to "data" for views fields. "preview" also is accepted, for rendering HTML.'),
        'source' => array('param' => 'output'),
        'default value' => 'data',
      ),
    ),
  );
  }
  return $resources;
}





/**
 * Render the given View's preview
 */
function _views_resource_render($name, $display = 'default', $args = array(), $limit = NULL) {

  $view = views_get_view($name);

  if (!$view) {
    return array('status' => 'error getting view', 'args' => func_get_args());
  }

  $view = views_get_view($name);
  $view->set_display($display);
  $view->set_arguments($args);
  $content = $view->preview();
  return array(0 => $content);
}

/**
 * Render a node and output its markup
 */
function _node_action_node_render($nid, $view_mode = 'full', $langcode = NULL) {
  return array(drupal_render(_node_action_node_view($nid, $view_mode, $langcode)));
}

/**
 * Get a node's render array
 */
function _node_action_node_view($nid, $view_mode = 'full', $langcode = NULL) {
  $node = node_load(array('nid' => $nid));
  return array(node_view($node, $view_mode, $langcode));
}

/**
 * Handler for the taxonomy_term/getChildren action, which actually uses taxonomy_get_tree and not taxonomy_get_children
 */
function _taxonomy_action_get_children($tid = NULL, $vid = NULL, $vocabulary_machine_name = NULL) {
  $parent = FALSE;
  $bundle = '';

  if (is_string($vocabulary_machine_name)) {
    $parent = taxonomy_vocabulary_machine_name_load($vocabulary_machine_name);
    $vid = $parent->vid;
  }
  else if (is_numeric($vid)) {
    $parent = taxonomy_vocabulary_load($vid);
  }
  else if (is_string($vid)) {
    $parent = taxonomy_vocabulary_machine_name_load($vid);
  }
  else if (is_numeric($tid)) {
    $parent = taxonomy_term_load($tid);
  }
  else if (is_string($tid)) {
    $parent = taxonomy_get_term_by_name($tid, $vid);
    $tid = $parent->tid;
  }

  // Bail early due to bad data
  if (!$parent) {
    return array();
  }

  if (empty($tid) && !empty($vid)) {
    // Favor the $vid
    $tid = 0;
    $bundle = $parent->machine_name;
  }
  else if (is_null($vid)) {
    $vid = $parent->vid;
    $bundle = $parent->vocabulary_machine_name;
  }

  $terms = taxonomy_get_tree($vid, $tid, $max_depth = NULL, $load_entities = TRUE);
  $terms[] = $parent;

  // For fields, we want a flatter structure without the langcode. And fields that are set up for
  // single values should not be in an array.
  $fields = field_info_instances('taxonomy_term', $bundle);

  foreach ($fields as $field_name => $field_def) {
    $info = field_info_field($field_name);

    foreach ($terms as $i => $term) {
      if (property_exists($term, $field_name)) {
        $values = array();
        $field = $term->$field_name;
        if (isset($field['und'])) {
          foreach ($field['und'] as $value) {
            $values[] = $value['value'];
          }
          if (1 == $info['cardinality']) {
            $terms[$i]->{$field_name} = array_shift($values);
          }
          else {
            $terms[$i]->{$field_name} = $values;
          }
        }
      }
    }
  }

  return $terms;
}
