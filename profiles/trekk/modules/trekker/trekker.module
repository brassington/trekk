<?php
/*
 * Implements hook_migrate_api()
 */
function trekker_migrate_api() {
  $api = array(
    'api' => 2,
  );
  return $api;
}

/**
* Implements of hook_ctools_plugin_api().
*
* Tell CTools that we support the default_ffmpeg_converter_presets API.
*/
function trekker_ctools_plugin_api($owner, $api) {
  if ($owner == 'trekker' && $api == 'default_trekker_configs') {
    return array('version' => 1);
  }
}

/**
* Implements of hook_ctools_plugin_directory().
*/
function trekker_ctools_plugin_directory($module, $type) {
  if ($type =='export_ui') {
    return 'plugins/export_ui';
  }
}

/**
* Implementation of hook_default_trekker_config().
* 
* Provide a couple of default presets.
*/
function trekker_default_trekker_config() {
	module_load_include('php', 'trekker', 'lib/spyc');

	// @todo: Get the dir name holding configs from a variable
	//$base = drupal_get_path('module', 'trekker') . '/tmp_migrations/';
	$base = 'sites/all/tmp_migrations';

  foreach (scandir($base) as $dirname) {
  	if (!file_exists($base . '/' . $dirname . '/config.yml')) {
  		continue;
  	}
  	
	  $settings = Spyc::YAMLLoad($base . '/' . $dirname . '/config.yml');
	  $schema = Spyc::YAMLLoad($base . '/' . $dirname . '/schema.yml');
	  $mappings = Spyc::YAMLLoad($base . '/' . $dirname . '/mapping.yml');
	  
	  // @todo: make this come from config
	  
	  
	  $config[$dirname] = (object)array(
	    'machine_name' => $dirname,
		  'description' => '',
		  'api_version' => 1,
		  'disabled' => TRUE,
		  'config' => array(
		  ),
		);
		
		foreach ($schema['schema'] as $component => $schema) {
		  $config[$dirname]->config[$component] = array(
		    'source' => array(
		      'connection' => array(
		        'type' => 'database',
		        'info' => array(
		          'driver' => 'mysql',
		          'database' => $settings['db'],
		          'username' => $settings['db_user'],
		          'password' => $settings['db_pass'],
		          'hostname' => isset($settings['db_host']) ? $settings['db_host'] : 'localhost',
		          'prefix' => isset($settings['db_prefix']) ? $settings['db_prefix'] : '',
		        ),
		      ),
		      'fields' => $schema['fields'],
		      'primary key' => $schema['primary key'],
		    ),
		    
		    'mapping' => $mappings['mappings'][$component],
		    // @todo: What we really need to do is deprecate two different migrations and instead
		    // use this configuration to set up the destination with its arguments.
		    //'destination' => array(
		    //  'entityType' => $entityType,
		    //  'entityBundle' => $entityBundle,
		    //),
		  );
		}
  }

  return $config;
}
